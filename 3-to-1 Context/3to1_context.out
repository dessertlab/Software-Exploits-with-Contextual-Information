jz shellcode
jmp notdecode
jne EncodedShellcode
mov byte [esi+ecx], bl
jz formatting
jz shift_decode
mov byte [esi + 1], dl
jz encoded
jnz Next_Cycle
jz Next_Cycle
mov   word [edi], ax
mov [esi], al
add byte [esi], 0x10 \n xor byte [esi], 0x88
add byte [esi], 2     
push ecx
jz download
jne retry
jne .l3
jb 0xf3
jz 0x8
add   eax, edx
xor esi, esi
je exit
jne    804808e
inc    ebx
jz find_egg
push edi
add byte [esi], 0x2
inc eax
je child
push eax
push eax
push eax
sub byte [esi], 0x1
je l3
push eax
mov al, 1
jge l1
jne loop
jnz cleanup
add eax, ebx
mov byte [edi], bl
jz formatting
jz shift_decode
mov byte [esi + 1], dl
jz encoded
jnz Next_Cycle
jz Next_Cycle
jz child
dec cl
shl al, 4
mov byte [esi], al
dec esp
jb 0xf3
jz 0x8
jne .l3
mov [esi],al
xchg eax,ebx
and [eax],ah
and [eax],ah
and [eax],ah
mov [edi+ecx],al
shl al, 4
mov byte [esi], al
jz 0x83
inc edx
xchg eax,ecx
inc esp
inc esi
mov ecx,eax
shr ebx, 28
jne findMZ
je foundPtr
mov [ebp+4], eax
mov [esp+0x1c], eax
mov word [esp+0x3c], bx
add byte [esi], 4     
xor byte [edi], 0xDD
not byte [edi]
jz download
jne shellcode
jz find_egg
jnz clean
mov bl, 1
add byte [esi+eax*3], 0x2
jnz Cycle
jmp notdecode
jne EncodedShellcode
mov byte [esi+eax], bl
jz format
jz shift
mov byte [esi + 3], dl
jz encodedTwo
jnz Next
jz CycleNext
mov word [edi+1], ax
mov [esi+1], al
add byte [esi], 5
push ecx
jz downloadtwo
jne retrytwo
jne .l7
jb 0xf4
jz 0x9
add ebx, edx
xor esi, esi
je exittwo
jne 804800e
inc ecx
jz find_eggtwo
push edi
add byte [esi], 0x5
inc ecx
je childtwo
push ebx
push ecx
push eax
sub byte [esi], 0x2
je l5
push ebx
mov al, 7
jge l2
jne loop
jnz cleanuptwo
add eax, ecx
mov byte [edi+1], bl
jz formattingtwo
jz shift_decodetwo
mov byte [esi + eax* 2], dl
jz encodedth
jnz Next_Cycle
jnz Next_Cycle
jz child
dec al
shl al, 7
mov byte [esi+ebx], al
dec esi
jb 0xf5
jz 0x9
jne .l8
mov [esi+ecx],al
xchg eax,ecx
and [eax+ecx],ah
and [eax+ebx*2],ah
mov [edi],al
shl al, 2
mov byte [esi+ecx], al
jz 0x85
inc edx
mov ecx,eax
shr ebx, 24
jne findMZM
je foundPtrM
mov [ebp+eax*4], eax
mov [esp+0x1c], ebx
mov word [esp+0x3c], cx
add byte [esi], 8
xor byte [edi], 0xAA
not byte [edi]
jz downloadtwo
jne shellcodetwo
jz find_eggtwo
jnz cleantwo
mov bl, 7
add byte [esi+eax*5], 0x2
jnz Cycle
jz shellcode
jmp nodecode
mov byte [esi+ecx], al
mov byte [esi + 1], bl
jz encod
jnz CycleProx
mov word [edi+1], ax
mov [esi], dl
add byte [edi], 2     
push eax
jz dld
jne ret
jne l4
jb 0xf3
jz 0x81
add   ebx, edx
xor edi, edi
je ext
jne 804808e
jz find
inc edi
je child
push edx
sub byte [edi], 0x1
mov al, 4
jnz clean
add edx, ebx
mov byte [edi], dl
mov byte [esi], dl
jz encod
mov byte [edi], al
and eax,ebx
mov [ecx],al
mov byte [esi], bl
xchg eax,ebx
inc edx
inc edi
shr ebx, 4
mov [esp+0x1c], ebx
xor byte [esi], 0xDD
mov cl, 1
jnz new
jz label
jne label2
jz downlo
xor byte [edi], 0xDD
mov word [esp], ax
je found
jne findS
mov [edi+ebx],al
mov [esi],dl
jne l27
jb 0x1f
jz advance
jz form
push ecx
push edx
mov [esi], cl
jne shencoded
add   eax, ecx
xor edx,edx
add byte [esi], 0x1
and eax,ah
and [eax],ah
shl dl, 2
inc edx
inc ebx
shr edx, 4
mov [esp+0x1c], edx
mov byte [edi+esi], dl
shl bl, 2
push ecx