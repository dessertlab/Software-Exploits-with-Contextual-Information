xor ecx, ecx
mov cl, 25
sub byte [esi], 8
not byte [esi]
mov bl, byte [esi + eax]
cmp bl, 0xaa
jz shellcode
cmp bl, 0xbb
jz xordecode
jmp notdecode
xor eax, eax
mov al, 0x1
mov bl, BYTE [esi+eax*1]
xor bl, 0xaa 
jne EncodedShellcode
mov bl, BYTE [esi+eax*1+0x1]
mov BYTE [edi], bl
xor ecx, ecx
mov cl, 0x19
push esi
move edi, esi
mov ax, [esi]
xor ax, 0x539
shr ax, 1
sub ax, 13
mov bl, byte [esi+ecx+1]
sub bl, 0x7
mov byte [esi+ecx], bl
xor ecx, ecx
mov cl, 0x1e
decode: \n mov bl, byte [esi]
xor bl, 0xBB
jz formatting
mov cl, byte [esi]
xor cl, 0XAA
jz shift_decode
mov dl, byte [esi + 1]
shr dl,1
mov byte [esi + 1], dl
mov bl, byte [eax]
xor bl, 0xBB
jz encoded
mov cl, byte [eax]
xor cl, 0xAA
jnz Next_Cycle
mov dl, byte [eax]
xor dl, 0xBB
jz Next_Cycle
mov ax, word [edi + 1 + ecx]
xor ax, bx
mov word [edi], ax
mov al, byte [esi]
xchg byte [esi+1], al
mov [esi], al
xor ch, byte [esi + edx]
mov byte [esp + eax], ch
not byte [esi]
add byte [esi], 0x02 \n xor byte [esi], 0x97
add byte [esi], 0x10 \n xor byte [esi], 0x88
xor eax, eax
mov al, 22
ror bl, cl
mov byte [esi + eax], bl
mov dl, byte [esi]
mov al, dl
shl eax, 28
shr eax, 28
rol byte [esi], 4 
not byte [esi]
add byte [esi], 2     
mov bl, byte [esi + eax + 1]
mov byte [edi], bl
mov ecx, 0x04030382
sub ecx, 0x03030303
push ecx
xor ebx,ebx
cmp eax,ebx
jz download
xor ebx,ebx
cmp eax,ebx
jne retry
mov ecx, 0x88998899
sub ecx, 0x1525152A
mov eax, esi
inc eax
xor ecx, ecx
lea ecx, [esp + 100]
and ax, cx
cmp ax, bx
jne .l3
xor eax, eax
mov ebx, eax \n mov ecx, eax
inc bl
cmp bl, 0x1f
jb 0xf3
inc ebx
cmp edx, ebx
jz 0x8
add   eax, edx
mov   esi, eax
mov   edx, eax
shr   edx, byte 16
add   eax, edx
sub    esp,0x28
mov    ebx,esp
shr    edx, 16
inc    edx
mov esi, 0x72702f2f
push esi
xor esi, esi
xor ebx,ebx
cmp eax,ebx
je exit
xor edi,edi
cmp eax,edi
jne 804808e
xor eax,eax
push eax
xor ebx,ebx
push ebx
inc ebx
mov esi, 0x353ffc3b
add esi, 0x33333333
sub esp, 8
mov ebx, esp
add esi,4
cmp[esi], edx
jz find_egg
mov edi,esp
mov ecx,edi
mov edi,876189623
add edi,edi
push edi
sub byte [esi],2
not byte [esi]
mov bl,byte ptr [esi+eax*1+0x1]
mov byte ptr [edi],bl
mov dx, 0xfff
inc dx
cmp byte [esi], 0x2
jg L1
add byte [esi], 0x2
inc eax
inc eax
inc eax
push eax
cmp eax, ebx
je child
xor ebx, ebx 
mov ebx, eax
mov ecx,eax
push ecx
add byte [edi], 0x4
not byte [edi]
mov eax, 0x8b90909d
not eax
push eax
mov eax, 0x9a8dd091
not eax
push eax
mov eax, 0x969d8cd0
not eax
push eax
not al
inc al
cmp byte [esi], 0x1
jl L1
sub byte [esi], 0x1
sub byte [esi], 0x9
not byte [esi]
push eax
push eax
inc ebx
push ebx
xor eax, eax
cmp edx, eax
je l3
xor ebx, ebx
mov bl, 0x3
shr cx, al
not cx
xor ecx, ecx
mov cl, [esi+1]
xor eax, eax 
mov al, 5
"xor ebx, ebx
"
mov bl, [esi+1]
mov eax, 0xb33fb33f
sub eax, 0x3bd04ed
push eax
mov byte [edi], bl
xor byte [edi], 0xdd
xor ebx, ebx 
mov bl, 5
sub byte [esi], 0x1
not byte [esi]
add byte [edi], 7
not byte [edi]
push eax 
xor eax, eax
mov al, 1
sub byte [esi], 3
not byte [esi]
xor ecx, ecx  
mov cl, 0x19
mov bl, byte [esi+ecx+1]
sub bl, 0x7
xor eax, eax \n mov al, 0x3f
cmp al, 9 
jge l1
sub eax, 0x2c3d2dff 
push eax
inc ecx
cmp ecx,4
jne loop
xor ecx,ecx
sub eax,ecx
jnz cleanup
xor eax,eax
mov al,0x6
mov eax, 0xBEBDBEBD
not eax
mov dl, byte [esi]
mov al, dl
mov cl, al
sub cl, dl
shl eax, 28
shr eax, 24
add eax, ebx
mov bl, 0xff
sub bl, al
mov byte [edi], bl
mov bl, byte [esi]
xor bl, 0xBB
jz formatting
mov cl, byte [esi]
xor cl, 0XAA
jz shift_decode
mov dl, byte [esi + 1]
shr dl,1
mov byte [esi + 1], dl
mov bl, byte [eax]
xor bl, 0xBB
jz encoded
mov bl, byte [eax] /n mov cl, byte [eax]
xor cl, 0xAA
jnz Next_Cycle
mov dl, byte [eax]
xor dl, 0xBB
jz Next_Cycle
mov dl, byte [eax + 1]
mov byte [eax], dl
xor eax,eax
mov al,0x2
xor ebx,ebx
cmp eax,ebx
jz child
xor eax,eax
mov al,0x7
xor ecx,ecx
mov cl,0x3
dec cl
xchg esp,esi
xchg ebx,esp
mov bx,1666
sub bx,1634
mov ax,1666
sub ax,1662
mov dx,16666
sub dx,15444
sub ecx, ecx
add cl, 0xb8
mov al, byte [edi]
sub al, 0x41
shl al, 4
add al, byte [edi]
sub al, 0x41
mov byte [esi], al
dec esp
dec esp
dec esp
xor eax, 0x58494741
dec eax
mov   ecx, [ebp+12]
xchg  [ebp+16], ecx
shr   edx, byte 16
add   eax, edx
sub ax, ax
inc ax
lea bx, [bp+0x08]
mov [bp+0x36], bx
mov [bp+0x36], bx
lea bx, [bp+0x0b]
sub ax, ax
mov [bp+0x07], al \n mov [bp+0x0a], al \n mov [bp+0x31], al
inc bl
cmp bl, 0x1f
jb 0xf3
xor eax, eax
mov al, 0x42
inc ebx
cmp edx, ebx
jz 0x8
mov esi, [ebp + 12]
mov ebx, esi
xor ebx, ebx
mov ebx, esi
and ax, cx
cmp ax, bx
jne .l3
xor eax,eax
mov [esi+0x6],al
mov edx,0x37383633
xor ebx,edx
mov edx,0x343d3141
xor ebx,edx
xor eax,eax
mov [ebx+0x7],al
dec eax
mov esi,eax
mov esi, 0x563a1f3e
add esi, 0x21354523
xor eax,eax
xor eax,[edi]
lea ebx,[esi+0xc]
mov [esi+0x2c],ebx
mov al,[esi]
dec al
mov [esi],al
xchg eax,ebx
xchg eax,ebx
xchg eax,ebx
add eax,[ebx]
add eax,[ebx]
add ecx,[eax+0x575188a]
mov ecx,0x303020a
or ah,[eax]
and [eax],ah
and [eax],ah
and [eax],ah
and [eax],ah
and [eax],ah
or dl,ah
or dl,[esi+0xa]
mov [eax],esp
and [eax],ah
and [eax],ah
mov ecx,esp
mov [edx],ecx
xchg eax,ebp
add eax,[ebx]
xor edx,edx
inc edx
xor eax,eax
inc eax
mov ebx,ecx
mov eax,ebx
not bl
xor al,bl
mov [edi+ecx],al
lea esi,[edi+0x8]
mov [edi+0x1e],esi
xor esi,esi
lea esi,[edi+0x10]
xor edi,edi
inc edi
neg edi
add eax,edi
lea ebx,[esi+0xf]
mov [esi+0x16],ebx
sub edi, 0xffffffdf
push edi
mov al, byte [edi]
sub al, 0x41
shl al, 4
add al, byte [edi]
sub al, 0x41
mov byte [esi], al
mov al,0xef
not al
xor ecx,ecx
cmp ecx,eax
jz 0x83
xor ebx,ebx
mov ebx,edi
inc edx
shl edx,10
inc edx
xchg eax,ecx
xchg eax,ecx
xchg eax,ecx
add [ecx],eax
add [ecx],eax
lea ebx,[esi+0x8]
mov [esi+0x4d],ebx
inc esp
inc esp
inc esp
mov ecx,esp
sub ecx,edx
mov edi,ecx
add edi,eax
push esi
dec esi
inc esi
xchg eax,edx
dec eax
mov ecx,eax
mov edi,esi
sub edi,34
mov ebx, [esp + ecx] 
mov edx, ebx
shr ebx, 28
mov ax, [edx]
cmp ax, 0x5a4d
jne findMZ
mov edi, [ebx + 0x3c]
add edi, ebx
add edi, ebx
add edi, 4
mov bl, byte[eax+ecx+5]
cmp bl, 0
je foundPtr
mov edi, [ebx + 0x78]
add edi, ebx
mov eax, [edi+0x20]
add eax, ebx
mov [ebp+4], eax
mov esi, [eax+ecx*4]
add esi, ebx
ror   edx, 0x0d
add   edx, eax
mov eax, [edx+4*ecx]
add eax, ebx
mov [esp+0x1c], eax
mov eax, 0xff9a879b
neg eax
mov bx, 0x1111
sub bx, 0x1010
mov word [esp+0x3c], bx
mov esi, 0x111111A9
sub esi, 0x11111111
sub esp,0x10
mov ebx,esp
mov cx, 0x3b1
add cx, 0x50
mov dl,0x12
add dl,0x3
mov dx, 0xffe
inc dx
rol byte [esi], 4
not byte [esi]
add byte [esi], 4     
mov bl, byte [esi + eax + 1]
mov byte [edi], bl
xor byte [edi], 0xDD
mov bl, byte [esi + eax + 1]
mov byte [edi], bl
not byte [edi]
mov esi, 0x222933f0
add esi, 0x3f3f3f3f
xor ebx,ebx
cmp eax,ebx
jz download
lea ebx, [esi+14]
mov [esi+39], ebx
lea ebx, [esi+23]
mov [esi+43], ebx
xor eax,eax
mov  al,0x5
xor ecx, ecx
mov cl,  2
xor ecx, ecx
mov cl, 0x3
mov    bl, BYTE [esi+eax*3]
xor    bl, 0xaa 
jne shellcode
add esi,4
cmp[esi], eax
jz find_egg
mov   ecx, [ebp]
xchg  [ebp+12], ecx
xor ecx,ecx
sub ebx,ecx
jnz clean
push ebx 
xor ebx, ebx
mov bl, 1
cmp byte [esi+eax*3], 0x2
jg L1
add byte [esi+eax*3], 0x2
dec ecx
mov esi,ecx
lea bx, [bp+0x036]
mov [bp+0x8], bx
mov bl, byte [eax] /n mov cl, byte [eax]
xor cl, 0xDD
jnz Cycle
shr ax, al
not ax
cmp cl, 0xbb
jz xordecode
jmp notdecode
mov    al, BYTE [esi+ebx*1]
xor    al, 0xaa 
jne EncodedShellcode
mov bl, byte [esi+eax+1]
sub bl, 0x9
mov byte [esi+eax], bl
decode: \n mov al, byte [esi]
xor al, 0xBB
jz format
mov bl, byte [esi]
xor bl, 0XBB
jz shift
mov dl, byte [esi + 3]
shr dl,1
mov byte [esi + 3], dl
mov al, byte [ebx]
xor al, 0xBB
jz encodedtwo
mov bl, byte [eax]
xor bl, 0xAA
jnz Next
mov bl, byte [eax]
xor bl, 0xBB
jz CycleNext
mov   ax, word [edi + 1 + ecx]
xor   ax, bx
mov   word [edi+1], ax
mov  al, byte [esi]
xchg byte [esi+1], al
mov [esi+1], al
rol byte [esi], 4 
not byte [esi]
add byte [esi], 5   
mov ecx, 0x04030382
sub ecx, 0x03030303
push ecx
xor eax,eax
cmp eax,ecx
jz downloadtwo
xor ebx,ebx
cmp ecx,ebx
jne retrytwo
and bx, cx
cmp bx, ax
jne .l7
inc al
cmp al, 0x1f
jb 0xf4
inc ebx
cmp edx, ebx
jz 0x9
mov   edx, ebx
shr   edx, byte 16
add   ebx, edx
mov esi, 0x72702f2f
push esi
xor esi, esi
xor eax,eax
cmp ebx,eax
je exittwo
xor    edi,edi
cmp    ebx,edi
jne    804800e
xor    ecx,ecx
push   ecx
inc    ecx
add esi,4
cmp[esi], ebx
jz find_eggtwo
mov edi,876198623
add edi,edi
push edi
cmp byte [esi], 0x2
jg L1
add byte [esi], 0x5
inc ecx
inc ecx
inc ecx
push ecx
cmp eax, ecx
je childtwo
mov ebx, 0x8b90909d
not ebx
push ebx
mov ecx, 0x9a8dd091
not ecx
push ecx
mov eax, 0x989d7cd0
not eax
push eax
cmp byte [esi], 0x1
jl L1
sub byte [esi], 0x2
xor eax, eax
cmp edx, eax
je l5
mov ebx, 0xb33fb33f
sub ebx, 0x3bd04ed
push ebx
push eax 
xor eax, eax
mov al, 7
xor eax, eax \n mov al, 0x3f
cmp al, 5
jge l2
inc ecx
cmp ecx,7
jne loop
xor ecx,ecx
sub ebx,ecx
jnz cleanuptwo
shl eax, 28
shr eax, 24
add eax, ecx
mov bl, 0xff
sub bl, al
mov byte [edi+1], bl
mov bl, byte [esi+1]
xor bl, 0xBB
jz formattingtwo
mov cl, byte [esi+eax*1]
xor cl, 0XAA
jz shift_decodetwo
mov dl, byte [esi + 1]
shr dl,1
mov byte [esi + eax*2], dl
mov cl, byte [eax]
xor cl, 0xBB
jz encodedth
mov bl, byte [eax] /n mov cl, byte [eax]
xor cl, 0xDD
jnz Next_Cycle
mov dl, byte [eax]
xor dl, 0xBB
jnz Next_Cycle
xor eax,eax
cmp eax,ecx
jz child
xor eax,eax
mov al,0x3
dec al
mov al, byte [edi]
sub al, 0x43
shl al, 7
add al, byte [edi]
sub al, 0x41
mov byte [esi+ebx], al
dec esi
dec esi
dec esi
inc bl
cmp bl, 0x1f
jb 0xf5
inc ebx
cmp edx, ebx
jz 0x9
and ax, bx
cmp cx, ax
jne .l8
mov al,[esi]
dec al
mov [esi+ecx],al
xchg eax,ecx
xchg eax,ecx
xchg eax,ecx
and [eax+ecx],ah
and [eax+ecx],ah
and [eax+ecx],ah
mov [eax+ebx*2],esp
and [eax+ebx*2],ah
and [eax+ebx*2],ah
not bl
xor al,bl
mov [edi],al
mov al, byte [edi]
sub al, 0x41
shl al, 2
add al, byte [edi+ecx]
sub al, 0x41
mov byte [esi+ecx], al
xor ecx,ecx
cmp ecx,eax
jz 0x85
inc edx
shl edx,9
inc edx
xchg eax,ebx
dec eax
mov ecx,eax
mov ebx, [esp + ecx] 
mov edx, ebx
shr ebx, 24
mov ax, [edx]
cmp ax, 0x5a7d
jne findMZM
mov bl, byte[eax+ecx*5]
cmp bl, 0
je foundPtrM
mov eax, [edi+0x20]
add eax, ebx
mov [ebp+eax*4], eax
mov ebx, [edx+4*ecx]
add ebx, eax
mov [esp+0x1c], ebx
mov cx, 0x1111
sub cx, 0x1010
mov word [esp+0x3c], cx
rol byte [esi], 4
not byte [esi]
add byte [esi], 8     
mov bl, byte [esi + eax + 1]
mov byte [edi], bl
xor byte [edi], 0xAA
mov bl, byte [esi + eax*2]
mov byte [edi], bl
not byte [edi]
xor ecx,ecx
cmp eax,ecx
jz downloadtwo
mov    bl, BYTE [esi+eax]
xor    bl, 0xbb
jne shellcodetwo
add esi,5
cmp [esi], eax
jz find_eggtwo
xor eax,eax
sub ebx,eax
jnz cleantwo
push ebx 
xor ebx, ebx
mov bl, 7
cmp byte [esi+eax*5], 0x2
jg L1
add byte [esi+eax*5], 0x2
mov bl, byte [eax] /n mov cl, byte [eax]
xor cl, 0xBB
jnz Cycle
mov cl, byte [esi + eax]
cmp cl, 0xaa
jz shellcode
cmp cl, 0xbb
jz xordecode
jmp nodecode
mov al, byte [esi+ecx+1]
sub al, 0x7
mov byte [esi+ecx], al
mov bl, byte [esi + 1]
shr bl,1
mov byte [esi + 1], bl
mov dl, byte [eax]
xor dl, 0xBB
jz encod
mov dl, byte [eax]
xor dl, 0xAA
jnz CycleProx
mov ax, word [edi]
xor ax, bx
mov word [edi+1], ax
mov dl, byte [esi]
xchg byte [esi+1], dl
mov [esi], dl
rol byte [edi], 4 
not byte [edi]
add byte [edi], 2     
mov eax, 0x04030382
sub eax, 0x03030303
push eax
xor edx,edx
cmp eax,edx
jz dld
xor edi,edi
cmp edx,edi
jne ret
and ax, bx
cmp ax, cx
jne l4
inc dl
cmp bl, 0x1f
jb 0xf3
inc edx
cmp eax, edx
jz 0x81
mov   edx, ecx
shr   edx, byte 16
add   ebx, edx
mov edi, 0x72702f2f
push edi
xor edi, edi
xor edx,edx
cmp ecx,edx
je ext
xor esi,esi
cmp eax,esi
jne 804808e
add edi,4
cmp [edi], edx
jz find
inc edi
inc edi
inc edi
push edx
cmp eax, edx
je child
mov edx, 0x9a8dd090
not edx
push edx
cmp byte [edi], 0x1
jl L7
sub byte [edi], 0x1
push edx 
xor edx, edx
mov al, 4
xor ecx,ecx
sub edx,ecx
jnz clean
shl edx, 28
shr edx, 24
add edx, ebx
mov dl, 0xff
sub dl, bl
mov byte [edi], dl
mov dl, byte [esi]
shr dl,1
mov byte [esi], dl
mov cl, byte [eax]
xor cl, 0xBB
jz encod
add al, byte [esi]
sub al, 0x41
mov byte [edi], al
and eax,ebx
and eax,ebx
and eax,ebx
not dl
xor al,dl
mov [ecx],al
add bl, byte [edi+esi]
sub bl, 0x41
mov byte [esi], bl
xchg eax,ebx
xchg eax,ebx
xchg eax,ebx
inc edx
inc edx
inc edx
push edi
dec edi
inc edi
mov eax, [esp + ecx] 
mov edx, eax
shr ebx, 4
mov ebx, [edx+ecx]
add ebx, eax
mov [esp+0x1c], ebx
mov cl, byte [eax]
mov byte [esi], cl
xor byte [esi], 0xDD
push ecx 
xor ecx, ecx
mov cl, 1
xor eax,eax
sub ecx,eax
jnz new
add edi,4
cmp [edi], eax
jz label
mov bl, BYTE [esi]
xor bl, 0xaa 
jne label2
xor edx,edx
cmp eax,edx
jz downlo
mov cl, byte [esi]
mov byte [edi], cl
xor byte [edi], 0xDD
mov ax, 0x1011
sub ax, 0x1000
mov word [esp], ax
mov cl, byte[eax+ecx]
cmp cl, 0
je found
mov ax, edx
cmp ax, 0x5a7d
jne findS
not cl
xor al,cl
mov [edi+ebx],al
mov dl,[esi]
dec dl
mov [esi],dl
and bx, cx
cmp bx, ax
jne l27
inc dl
cmp dl, 0xf3
jb 0x1f
mov al, byte [ecx+ebx]
xor al, 0xBB
jz advance
mov bl, esi
xor bl, 0xAA 
jz form
mov ecx, 0xb33fb33f
sub ecx, 0x3bd04ed
push ecx
mov edx, 0x9a8dd110
not edx
push edx
mov cl, byte [edi]
xchg byte [esi+1], cl
mov [esi], cl
mov dl, byte[esi+eax]
xor dl, 0xbb 
jne shencoded
mov   ecx, eax
shr   ecx, byte 4
add   eax, ecx
mov edx, 0x72702f2f
push edx
xor edx,edx
cmp byte [esi], 0x1
jg L3
add byte [esi], 0x1
or ah,eax
and eax,ah
and eax,ah
and [eax],ah
and [eax],ah
and [eax],ah
mov dl, byte [edi]
sub dl, 0x43
shl dl, 2
inc edx
inc edx
inc edx
push ebx
dec ebx
inc ebx
mov ecx, [esp] 
mov edx, ecx
shr edx, 4
mov edx, [edx+4*ecx]
add edx, ebx
mov [esp+0x1c], edx
mov dl, 0xff
sub dl, al
mov byte [edi+esi], dl
mov bl, byte [edi]
sub bl, 0x43
shl bl, 2
mov ecx, 0x04030382
sub ecx, 0x03030327
push ecx
shl ecx, 4
shr ecx, 2
add ecx, ebx
mov al, byte[esi + edi]
cmp al, 0xbb
jnz shellcode